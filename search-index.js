var searchIndex = JSON.parse('{\
"hotshot_primitives":{"doc":"","t":"AANNDNNDGEDNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMNNNNNNNENLLLLLLLLLLLLLLLLLLLLQQQQIKKK","n":["stake_table","vdf","ACTIVE","Branch","EncodedPublicKey","FROZEN","Leaf","MerkleCommitment","MerklePath","MerklePathEntry","MerkleProof","PENDING","STVersion","StakeTable","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","advance","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commitment","compute_root","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","digest","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","from_str","get_key","get_key_value","get_value","hash","hash","hash","hash","index","index","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","lookup","new","new","num_keys","partial_cmp","path","register","sample_key_by_stake","serialize","serialize","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","set_value","simple_lookup","size","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","total_stakes","tree_height","tree_height","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","verify","vzip","vzip","vzip","vzip","vzip","vzip","key","pos","siblings","value","ExistingKey","InsufficientFund","KeyNotFound","MalformedProof","MismatchedKey","RescueError","StakeOverflow","StakeTableError","VerificationError","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","Input","Output","Proof","PublicParameter","VDF","eval","setup","verify"],"q":["hotshot_primitives","","hotshot_primitives::stake_tablehotshot_primitives::stake_table::MerklePathEntry","","","","hotshot_primitives::stake_table::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot_primitives::vdf","","","","","","",""],"d":["","","","","Copied from HotShot repo. Type saftey wrapper for byte …","","","A succint commitment for Merkle tree","Path from a Merkle root to a leaf","A compressed Merkle node for Merkle path","An existential proof","","Enum type for stake table version","Locally maintained stake table","","","","","","Update the stake table when the epoch number advances, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a succint commitment for a specific stake table …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Index for the given key","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns a membership proof for the input key for a …","","Initiating an empty stake table. Overall capacity is …","Returns the number of keys for a specific stake table …","","A Merkle path for the given leaf","Register a new key from the pending stake table","Almost uniformly samples a key weighted by its stake from …","","","","","","","","","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","Returns the number of stakes holding by the input key for …","","","","","","","","","","","Returns the total amount of stakes for a specific stake …","","","","","","","","","","","","","","","","","","","","","","","","","Update the stake of the <code>key</code> with …","","","","","","","","","","","","Key already exists","Insufficient fund: the number of stake cannot be negative","Key not found","Malformed Merkle proof","Key mismatched","Internal error caused by Rescue","The number of stake exceed U256","","Verification Error","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","VDF input.","VDF output.","VDF proof.","Public parameters","A trait for VDF proof, evaluation and verification.","Computes the VDF output and proof.","Generates a public parameter from RNG with given …","Verifies a VDF output given the proof."],"i":[0,0,13,10,0,13,10,0,0,0,0,13,0,0,10,11,8,9,2,2,13,10,11,8,9,2,13,10,11,8,9,2,8,9,13,10,11,8,9,2,13,10,11,8,9,2,8,9,10,11,8,9,2,10,11,8,9,2,9,2,11,13,10,11,8,9,2,13,10,11,8,9,2,10,11,8,9,2,8,9,8,13,10,11,8,9,2,10,11,8,9,2,10,11,8,9,2,0,10,11,8,8,9,9,2,13,10,11,8,9,2,8,9,11,11,11,10,11,8,9,11,11,13,10,11,8,9,2,13,10,11,8,9,2,13,10,11,8,9,2,13,10,11,8,9,2,13,10,11,8,9,2,2,8,2,2,9,11,2,2,10,11,8,9,2,8,9,8,9,2,2,8,8,9,10,11,8,9,2,8,9,2,11,8,13,10,11,8,8,8,9,9,9,2,13,10,11,8,9,2,13,10,11,8,9,2,2,11,13,10,11,8,9,2,36,37,37,36,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,38,38,38,38,0,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[0,[4,5]]],[[7,[6]]]],[[[0,[4,5]]],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[7,[6]]]],[9,[[7,[6]]]],[10,10],[11,11],[8,8],[9,9],[2,2],[[]],[[]],[[]],[[]],[[]],[[9,9],12],[[2,13],8],[11,[[7,[14,15]]]],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[16],[[],[[7,[10]]]],[[],[[7,[11]]]],[[],[[7,[8]]]],[[],[[7,[9]]]],[[],[[7,[2]]]],[[17,18,19],[[7,[8,6]]]],[[17,18,19],[[7,[9,6]]]],[8,14],[16],[16],[16],[16],[16],[16],[[10,10],20],[[11,11],20],[[8,8],20],[[9,9],20],[[2,2],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[10,21],22],[[11,21],22],[[8,21],22],[[8,21],22],[[9,21],22],[[9,21],22],[[2,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[7,[8]]]],[23,[[7,[9]]]],[11,[[24,[9]]]],[11,24],[11,[[24,[25]]]],[10],[11],[8],[9],[11,16],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[26]]],[[27,[3,26]]]],[[[27,[26]]],[[27,[3,26]]]],[[[27,[26]]],[[27,[3,26]]]],[[[27,[26]]],[[27,[3,26]]]],[[[27,[26]]],[[27,[3,26]]]],[[[27,[26]]],[[27,[3,26]]]],[28,[[28,[3]]]],[28,[[28,[3]]]],[28,[[28,[3]]]],[28,[[28,[3]]]],[28,[[28,[3]]]],[28,[[28,[3]]]],[29,[[29,[3]]]],[29,[[29,[3]]]],[29,[[29,[3]]]],[29,[[29,[3]]]],[29,[[29,[3]]]],[29,[[29,[3]]]],[[2,13,9],[[7,[11,15]]]],[[14,16,16],8],[16,2],[[2,13],16],[[9,9],[[24,[12]]]],0,[[2,9,25],[[7,[15]]]],[2,9],[10,7],[11,7],[8,7],[9,7],[2,7],[[8,30,18],[[7,[6]]]],[[9,30,18],[[7,[6]]]],[[8,18],16],[[9,18],16],[[2,9,25],[[7,[25,15]]]],[[2,13,9],[[7,[25,15]]]],[8,16],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[2,13],25],[11,16],[8,16],[[],7],[[],7],[[],7],[32,[[7,[8]]]],[[],7],[32,[[7,[8]]]],[[],7],[32,[[7,[9]]]],[32,[[7,[9]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[2,9,25,20],[[7,[25,15]]]],[[11,8],[[7,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[]],[[]],[16],[16],[16],[[15,21],22],[[15,21],22],[[]],[[],16],[[]],[[[27,[26]]],[[27,[3,26]]]],[28,[[28,[3]]]],[29,[[29,[3]]]],[[],31],[[],7],[[],7],[[],33],[[]],0,0,0,0,0,[[],[[7,[34]]]],[[35,24],[[7,[34]]]],[[],[[7,[34]]]]],"p":[[3,"Private"],[3,"StakeTable"],[8,"Any"],[8,"Iterator"],[8,"Send"],[4,"SerializationError"],[4,"Result"],[3,"MerkleCommitment"],[3,"EncodedPublicKey"],[4,"MerklePathEntry"],[3,"MerkleProof"],[4,"Ordering"],[4,"STVersion"],[6,"Fr"],[4,"StakeTableError"],[15,"usize"],[8,"Read"],[4,"Compress"],[4,"Validate"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[3,"U256"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Write"],[3,"String"],[3,"TaggedBase64"],[3,"TypeId"],[4,"PrimitivesError"],[15,"u64"],[13,"Leaf"],[13,"Branch"],[8,"VDF"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
