var searchIndex = JSON.parse('{\
"hotshot_primitives":{"doc":"","t":"AAAAAAQIIKKKKFKKKQQQQIQKAKKKDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLNNDNNDGEDNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMNNNNNNNENLLLLLLLLLLLLLLLLLLLLQQQQIKAKKSDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNQNQQEGIALLLLLKLLKLLLLLLLLLLLLLLKLLLLLKLGDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["circuit","qc","stake_table","vdf","vid","qc_keyagg","KeyType","QCKeyAggregateGadget","VerKeyVar","aggregate_with_selectors","check_aggregate_vk","check_stake_table_digest","check_threshold","compute_stake_table_hash","enforce_equal","is_equal","native_vars","MessageLength","QC","QCProverParams","QCVerifierParams","QuorumCertificate","QuorumSize","assemble","bit_vector","check","sign","trace","BitVectorQC","QCParams","StakeTableEntry","agg_sig_pp","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","assemble","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","serialize","serialize","serialize","sign","stake_amount","stake_entries","stake_key","threshold","trace","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ACTIVE","Branch","EncodedPublicKey","FROZEN","Leaf","MerkleCommitment","MerklePath","MerklePathEntry","MerkleProof","PENDING","STVersion","StakeTable","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","advance","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commitment","compute_root","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","digest","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","from_str","get_key","get_key_value","get_value","hash","hash","hash","hash","index","index","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","lookup","new","new","num_keys","partial_cmp","path","register","sample_key_by_stake","serialize","serialize","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","set_value","simple_lookup","size","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","total_stakes","tree_height","tree_height","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","verify","vzip","vzip","vzip","vzip","vzip","vzip","key","pos","siblings","value","ExistingKey","InsufficientFund","KeyNotFound","MalformedProof","MismatchedKey","RescueError","StakeOverflow","StakeTableError","VerificationError","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","vzip","Input","Output","Proof","PublicParameter","VDF","eval","minroot","setup","verify","EXP_COEF","MinRoot","MinRootElement","MinRootField","MinRootPP","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","difficulty","drop","drop","drop","eq","eq","equivalent","equivalent","eval","fmt","fmt","from","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","partial_cmp","partial_cmp","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","setup","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Argument","Commitment","Internal","StorageCommon","StorageShare","VidError","VidResult","VidScheme","advz","as_any","as_any_mut","as_error_source","borrow","borrow_mut","commit","deref","deref_mut","dispersal_data","drop","fmt","fmt","from","from","from","from","from","init","into","into_any","into_any_arc","into_any_rc","provide","recover_payload","source","to_string","try_from","try_into","type_id","verify_share","vzip","Advz","Common","GenericAdvz","Share","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","commit","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_with_mode","dispersal_data","dispersal_data_from_elems","drop","drop","drop","eq","equivalent","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","recover_elems","recover_payload","serialize","serialize","serialize_with_mode","serialized_size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_share","vzip","vzip","vzip"],"q":[[0,"hotshot_primitives"],[5,"hotshot_primitives::circuit"],[6,"hotshot_primitives::circuit::qc_keyagg"],[17,"hotshot_primitives::qc"],[28,"hotshot_primitives::qc::bit_vector"],[101,"hotshot_primitives::stake_table"],[313,"hotshot_primitives::stake_table::MerklePathEntry"],[317,"hotshot_primitives::stake_table::error"],[346,"hotshot_primitives::vdf"],[355,"hotshot_primitives::vdf::minroot"],[446,"hotshot_primitives::vid"],[486,"hotshot_primitives::vid::advz"]],"d":["","Quorum Certificate traits and implementations.","","Trait and implementation for a Verifiable Delay Function …","Trait and implementation for a Verifiable Information …","Circuit implementation of stake key aggregation for quorum …","","Plonk circuit gadget for stake key aggregation for quorum …","Traits for verification keys","Aggregate the verification keys with Boolean selectors.","Key aggregation circuit","Stake table commitment checking circuit","Quorum threshold checking circuit","Digest a list of verification keys and their associated …","Enforce that two input verification key variables are …","Check whether two input verification key variables are …","Returns a list of variables associated with this key …","Allows to fix the size of the message at compilation time.","Type of the actual quorum certificate object","Public parameters for generating the QC E.g: snark …","Public parameters for validating the QC E.g: verifying …","Trait for validating a QC built from different signatures …","Type of the quorum size (e.g. number of votes or …","Computes an aggregated signature from a set of partial …","Implementation for BitVectorQC that uses BLS signature + …","Checks an aggregated signature over some message provided …","Produces a partial signature on a message with a single …","Trace the list of signers given a qc.","An implementation of QC using BLS signature and a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copied from HotShot repo. Type saftey wrapper for byte …","","","A succint commitment for Merkle tree","Path from a Merkle root to a leaf","A compressed Merkle node for Merkle path","An existential proof","","Enum type for stake table version","Locally maintained stake table","","","","","","Update the stake table when the epoch number advances, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a succint commitment for a specific stake table …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Index for the given key","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns a membership proof for the input key for a …","","Initiating an empty stake table. Overall capacity is …","Returns the number of keys for a specific stake table …","","A Merkle path for the given leaf","Register a new key from the pending stake table","Almost uniformly samples a key weighted by its stake from …","","","","","","","","","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","Returns the number of stakes holding by the input key for …","","","","","","","","","","","Returns the total amount of stakes for a specific stake …","","","","","","","","","","","","","","","","","","","","","","","","","Update the stake of the <code>key</code> with …","","","","","","","","","","","","Key already exists","Insufficient fund: the number of stake cannot be negative","Key not found","Malformed Merkle proof","Key mismatched","Internal error caused by Rescue","The number of stake exceed U256","","Verification Error","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","VDF input.","VDF output.","VDF proof.","Public parameters","A trait for VDF proof, evaluation and verification.","Computes the VDF output and proof.","","Generates a public parameter from RNG with given …","Verifies a VDF output given the proof.","The MinRoot iteration is calculating the cubic root (or …","","","MinRoot compatible field","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caller provided an invalid argument","Payload commitment.","Internal error","Common data sent to all storage nodes.","Share-specific data sent to a storage node.","The error type for <code>VidScheme</code> methods.","","VID: Verifiable Information Dispersal","Implementation of Verifiable Information Dispersal (VID) …","","","","","","Compute a payload commitment.","","","Compute shares to send to the storage nodes","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","Recover payload from shares. Do not verify shares or check …","","","","","","Verify a share. Used by both storage node and retrieval …","","The ADVZ VID scheme, a concrete impl for <code>VidScheme</code>.","The <code>VidScheme::StorageCommon</code> type for <code>Advz</code>.","Like <code>Advz</code> except with more abstraction.","The <code>VidScheme::StorageShare</code> type for <code>Advz</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Same as <code>VidScheme::dispersal_data</code> except <code>payload</code> is a …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Return a new instance of <code>Self</code>.","Same as <code>VidScheme::recover_payload</code> except returns a <code>Vec</code> of …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,6,0,0,6,84,84,84,0,6,6,6,85,85,85,85,0,85,85,0,85,85,85,0,0,0,24,22,23,24,22,23,24,22,22,23,24,22,23,24,22,22,23,24,22,23,24,22,23,24,22,23,24,23,24,23,24,22,23,24,22,23,24,22,23,24,22,23,24,22,23,24,22,23,24,22,23,24,22,23,24,23,24,22,22,23,24,22,23,24,22,23,24,22,23,24,46,43,0,46,43,0,0,0,0,46,0,0,43,44,41,42,37,37,46,43,44,41,42,37,46,43,44,41,42,37,41,42,46,43,44,41,42,37,46,43,44,41,42,37,41,42,43,44,41,42,37,43,44,41,42,37,42,37,44,46,43,44,41,42,37,46,43,44,41,42,37,43,44,41,42,37,41,42,41,46,43,44,41,42,37,43,44,41,42,37,43,44,41,42,37,0,43,44,41,41,42,42,37,46,43,44,41,42,37,41,42,44,44,44,43,44,41,42,44,44,46,43,44,41,42,37,46,43,44,41,42,37,46,43,44,41,42,37,46,43,44,41,42,37,46,43,44,41,42,37,37,41,37,37,42,44,37,37,43,44,41,42,37,41,42,41,42,37,37,41,41,42,43,44,41,42,37,41,42,37,44,41,46,43,44,41,41,41,42,42,42,37,46,43,44,41,42,37,46,43,44,41,42,37,37,44,46,43,44,41,42,37,86,87,87,86,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,88,88,88,88,0,88,0,88,88,61,0,0,0,0,60,62,89,60,62,89,60,62,60,62,89,60,62,89,60,62,60,62,60,62,60,62,60,62,60,62,89,60,62,89,60,62,60,62,60,89,60,62,60,62,60,62,89,60,62,89,60,62,62,89,60,62,89,60,62,89,60,62,89,60,62,89,60,62,60,62,60,62,60,62,89,60,62,89,60,62,89,60,62,89,60,62,89,89,60,62,70,90,70,90,90,0,0,0,0,70,70,70,70,70,90,70,70,90,70,70,70,70,70,70,70,70,70,70,70,70,70,70,90,70,70,70,70,70,90,70,0,0,0,0,78,77,82,78,77,82,78,77,77,82,78,77,82,78,77,77,78,77,78,77,82,77,82,78,77,82,78,77,78,77,77,82,82,82,78,77,77,77,78,77,82,78,77,82,78,77,82,78,77,82,78,77,82,78,77,82,78,77,82,82,82,78,77,77,77,78,77,82,78,77,82,78,77,82,78,77,82,82,78,77],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]]],[[5,[4]]]],[[[6,[3]],3],[[5,[4]]]],[7,[[5,[4]]]],[7,[[5,[4]]]],[[],8],[[[2,[1]]],[[5,[4]]]],[[[2,[1]]],[[5,[9,4]]]],[[],[[10,[7]]]],0,0,0,0,0,0,[11,[[5,[12]]]],0,[13,[[5,[12]]]],[[13,[0,[14,15]]],[[5,[12]]]],[13,[[5,[10,12]]]],0,0,0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[11,[[5,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[5,[12]]]],[17],[17],[17],[17],[17],[17],[18,[[5,[[22,[[0,[19,20,21]]]]]]]],[18,[[5,[[23,[21]]]]]],[18,[[5,[[24,[21,21]]]]]],[17],[17],[17],[[[23,[25]],[23,[25]]],26],[[[24,[25,25]],[24,[25,25]]],26],[[[23,[27]],28],29],[[[24,[27,27]],28],29],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[[[22,[[0,[19,20,21]]]],34],5],[[[23,[20]],34],5],[[[24,[20,20]],34],5],[[13,[0,[14,15]]],[[5,[12]]]],0,0,0,0,[13,[[5,[10,12]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],35],[[],35],[[],35],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[36],[36],[36],[36],[36],[37],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[0,[38,39]]],[[5,[40]]]],[[[0,[38,39]]],[[5,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,[[5,[40]]]],[42,[[5,[40]]]],[43,43],[44,44],[41,41],[42,42],[37,37],[[]],[[]],[[]],[[]],[[]],[[42,42],45],[[37,46],41],[44,[[5,[47,48]]]],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[18,[[5,[43]]]],[18,[[5,[44]]]],[18,[[5,[41]]]],[18,[[5,[42]]]],[18,[[5,[37]]]],[[49,50,51],[[5,[41,40]]]],[[49,50,51],[[5,[42,40]]]],[41,47],[17],[17],[17],[17],[17],[17],[[43,43],26],[[44,44],26],[[41,41],26],[[42,42],26],[[37,37],26],[[],26],[[],26],[[],26],[[],26],[[],26],0,[[43,28],29],[[44,28],29],[[41,28],29],[[41,28],29],[[42,28],29],[[42,28],29],[[37,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[52,[[5,[41]]]],[52,[[5,[42]]]],[44,[[53,[42]]]],[44,53],[44,[[53,[54]]]],[[43,55]],[[44,55]],[[41,55]],[[42,55]],[44,17],0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[[37,46,42],[[5,[44,48]]]],[[47,17,17],41],[17,37],[[37,46],17],[[42,42],[[53,[45]]]],0,[[37,42,54],[[5,[48]]]],[[37,[0,[14,15]]],42],[[43,34],5],[[44,34],5],[[41,34],5],[[42,34],5],[[37,34],5],[[41,56,50],[[5,[40]]]],[[42,56,50],[[5,[40]]]],[[41,50],17],[[42,50],17],[[37,42,54],[[5,[54,48]]]],[[37,46,42],[[5,[54,48]]]],[41,17],[[],57],[[],57],[[]],[[]],[[]],[[]],[[]],[[],57],[[],57],[[37,46],54],[44,17],[41,17],[[],5],[[],5],[[],5],[58,[[5,[41]]]],[[],5],[58,[[5,[41]]]],[[],5],[58,[[5,[42]]]],[58,[[5,[42]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[37,42,54,26],[[5,[54,48]]]],[[44,41],[[5,[48]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],16],[[],16],[[]],[[]],[17],[17],[17],[[48,28],29],[[48,28],29],[[]],[[],17],[[]],[[[31,[30]]],[[31,[16,30]]]],[32,[[32,[16]]]],[33,[[33,[16]]]],[[],57],[[],5],[[],5],[[],35],[[]],0,0,0,0,0,[[],[[5,[12]]]],0,[[59,[53,[[0,[14,15]]]]],[[5,[12]]]],[[],[[5,[12]]]],0,0,0,0,0,[36],[36],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[0,[38,39]]],[[5,[40]]]],[[[0,[38,39]]],[[5,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[60,[[5,[40]]]],[[[62,[61]]],[[5,[40]]]],[60,60],[[[62,[[0,[63,61]]]]],[[62,[[0,[63,61]]]]]],[[]],[[]],[[60,60],45],[[[62,[[0,[64,61]]]],[62,[[0,[64,61]]]]],45],[[],60],[[],[[62,[[0,[65,61]]]]]],[17],[17],[17],[17],[17],[17],[[49,50,51],[[5,[60,40]]]],[[49,50,51],[[5,[[62,[61]],40]]]],0,[17],[17],[17],[[60,60],26],[[[62,[[0,[25,61]]]],[62,[[0,[25,61]]]]],26],[[],26],[[],26],[[],[[5,[12]]]],[[60,28],29],[[[62,[[0,[27,61]]]],28],29],[[]],[[]],[[]],[66,[[62,[61]]]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[[60,60],[[53,[45]]]],[[[62,[[0,[67,61]]]],[62,[[0,[67,61]]]]],[[53,[45]]]],[[60,56,50],[[5,[40]]]],[[[62,[61]],56,50],[[5,[40]]]],[[60,50],17],[[[62,[61]],50],17],[[59,[53,[[0,[14,15]]]]],[[5,[12]]]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],35],[[],35],[[],35],[[],[[5,[12]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],16],[[],16],[[],68],[[]],[[]],[[],69],[17],[17],[[],69],[17],[[70,28],29],[[70,28],29],[71,70],[72,70],[[]],[12,70],[40,70],[[],17],[[]],[[[31,[30]]],[[31,[16,30]]]],[32,[[32,[16]]]],[33,[[33,[16]]]],[73],[[],[[69,[[10,[74]]]]]],[70,[[53,[68]]]],[[],57],[[],5],[[],5],[[],35],[[],[[69,[5]]]],[[]],0,0,0,0,[36],[36],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[0,[38,39]]],[[5,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[77,[75,76]]],[[5,[40]]]],[[[78,[75,76]]],[[78,[75,76]]]],[[[77,[75,76]]],[[77,[75,76]]]],[[]],[[]],[[[82,[79,66,[0,[80,81,65,63,56]],76]]],69],[[],[[77,[75,76]]]],[17],[17],[17],[17],[17],[17],[18,[[5,[[78,[75,76]]]]]],[18,[[5,[[77,[75,76]]]]]],[[49,50,51],[[5,[[77,[75,76]],40]]]],[[[82,[79,66,[0,[80,81,65,63,56]],76]]],69],[[[82,[79,66,[0,[80,81,65,63,56]],76]]],69],[17],[17],[17],[[[77,[75,76]],[77,[75,76]]],26],[[],26],[[[78,[75,76]],28],29],[[[77,[75,76]],28],29],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[[[31,[30]]],[[31,[16,30]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[32,[[32,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[33,[[33,[16]]]],[[17,17,83],[[69,[[82,[79]]]]]],[[[82,[79,66,[0,[80,81,65,63,56]],76]]],[[69,[10]]]],[[[82,[79,66,[0,[80,81,65,63,56]],76]]],[[69,[[10,[74]]]]]],[[[78,[75,76]],34],5],[[[77,[75,76]],34],5],[[[77,[75,76]],56,50],[[5,[40]]]],[[[77,[75,76]],50],17],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],35],[[],35],[[],35],[[[82,[79,66,[0,[80,81,65,63,56]],76]]],[[69,[5]]]],[[]],[[]],[[]]],"c":[],"p":[[8,"PrimeField"],[3,"PlonkCircuit"],[8,"EmulationConfig"],[4,"CircuitError"],[4,"Result"],[8,"VerKeyVar"],[6,"Variable"],[8,"RescueParameter"],[3,"BoolVar"],[3,"Vec"],[3,"BitSlice"],[4,"PrimitivesError"],[3,"GenericArray"],[8,"CryptoRng"],[8,"RngCore"],[8,"Any"],[15,"usize"],[8,"Deserializer"],[8,"AggregateableSignatureSchemes"],[8,"Serialize"],[8,"Deserialize"],[3,"BitVectorQC"],[3,"StakeTableEntry"],[3,"QCParams"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Serializer"],[3,"TypeId"],[3,"Private"],[3,"StakeTable"],[8,"Iterator"],[8,"Send"],[4,"SerializationError"],[3,"MerkleCommitment"],[3,"EncodedPublicKey"],[4,"MerklePathEntry"],[3,"MerkleProof"],[4,"Ordering"],[4,"STVersion"],[6,"Fr"],[4,"StakeTableError"],[8,"Read"],[4,"Compress"],[4,"Validate"],[15,"str"],[4,"Option"],[3,"U256"],[8,"Hasher"],[8,"Write"],[3,"String"],[3,"TaggedBase64"],[15,"u64"],[3,"MinRootPP"],[8,"MinRootField"],[3,"MinRootElement"],[8,"Clone"],[8,"Ord"],[8,"Default"],[8,"AffineRepr"],[8,"PartialOrd"],[8,"Error"],[6,"VidResult"],[4,"VidError"],[3,"Error"],[4,"PCSError"],[3,"Demand"],[15,"u8"],[8,"PolynomialCommitmentScheme"],[8,"MerkleTreeScheme"],[3,"Common"],[3,"Share"],[8,"UnivariatePCS"],[8,"Digest"],[8,"DynDigest"],[3,"GenericAdvz"],[8,"Borrow"],[8,"QCKeyAggregateGadget"],[8,"QuorumCertificate"],[13,"Leaf"],[13,"Branch"],[8,"VDF"],[3,"MinRoot"],[8,"VidScheme"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
