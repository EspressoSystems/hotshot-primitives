var searchIndex = JSON.parse('{\
"hotshot_primitives":{"doc":"","t":"AAAAAAQIIKKKKFKKKQQQQIQKAKKKDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLQNNQNNQQNNQDGEDEDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLKLKLKLLLMKLKLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLMMMMNNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLQQQQIKAKKSDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNQNQQEGIALLLLLKLLKLLLLLLLLLLLLLLKLLLLLKLGDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["circuit","qc","stake_table","vdf","vid","qc_keyagg","KeyType","QCKeyAggregateGadget","VerKeyVar","aggregate_with_selectors","check_aggregate_vk","check_stake_table_digest","check_threshold","compute_stake_table_hash","enforce_equal","is_equal","native_vars","MessageLength","QC","QCProverParams","QCVerifierParams","QuorumCertificate","QuorumSize","assemble","bit_vector","check","sign","trace","BitVectorQC","QCParams","agg_sig_pp","as_any","as_any","as_any_mut","as_any_mut","assemble","borrow","borrow","borrow_mut","borrow_mut","check","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","serialize","sign","stake_table","threshold","trace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Amount","BlockNum","Branch","Commitment","EpochStart","Head","IntoIter","Key","LastEpochStart","Leaf","LookupProof","MerkleCommitment","MerklePath","MerklePathEntry","MerkleProof","SnapshotVersion","StakeTable","StakeTableScheme","__clone_box","__clone_box","__clone_box","__clone_box","advance","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_deregister","batch_register","batch_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commitment","commitment","compute_root","contains_key","contains_key","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deregister","deregister","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","digest","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","get_key","get_key_value","get_value","hash","hash","hash","index","index","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","iter","iter","len","len","lookup","lookup","new","new","path","register","register","sample","sample","serialize","serialize","serialize","serialize","serialize_with_mode","serialized_size","set_value","simple_lookup","simple_lookup","size","tag","to_owned","to_owned","to_owned","to_owned","to_string","total_stake","total_stake","tree_height","tree_height","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","verify","vzip","vzip","vzip","vzip","vzip","key","pos","siblings","value","ExistingKey","InsufficientFund","KeyNotFound","MalformedProof","MismatchedKey","RescueError","SnapshotUnsupported","StakeOverflow","StakeTableError","VerificationError","as_any","as_any_mut","as_error_source","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","init","into","into_any","into_any_arc","into_any_rc","provide","to_string","try_from","try_into","type_id","vzip","Input","Output","Proof","PublicParameter","VDF","eval","minroot","setup","verify","EXP_COEF","MinRoot","MinRootElement","MinRootField","MinRootPP","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","difficulty","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","from","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","partial_cmp","partial_cmp","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","setup","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Argument","Commitment","Internal","StorageCommon","StorageShare","VidError","VidResult","VidScheme","advz","as_any","as_any_mut","as_error_source","borrow","borrow_mut","commit","deref","deref_mut","dispersal_data","drop","fmt","fmt","from","from","from","from","from","init","into","into_any","into_any_arc","into_any_rc","provide","recover_payload","source","to_string","try_from","try_into","type_id","verify_share","vzip","Advz","Common","GenericAdvz","Share","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","commit","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_with_mode","dispersal_data","dispersal_data_from_elems","drop","drop","drop","eq","equivalent","equivalent","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","recover_elems","recover_payload","serialize","serialize","serialize_with_mode","serialized_size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_share","vzip","vzip","vzip"],"q":[[0,"hotshot_primitives"],[5,"hotshot_primitives::circuit"],[6,"hotshot_primitives::circuit::qc_keyagg"],[17,"hotshot_primitives::qc"],[28,"hotshot_primitives::qc::bit_vector"],[75,"hotshot_primitives::stake_table"],[274,"hotshot_primitives::stake_table::MerklePathEntry"],[278,"hotshot_primitives::stake_table::error"],[310,"hotshot_primitives::vdf"],[319,"hotshot_primitives::vdf::minroot"],[412,"hotshot_primitives::vid"],[452,"hotshot_primitives::vid::advz"]],"d":["","Quorum Certificate traits and implementations.","","Trait and implementation for a Verifiable Delay Function …","Trait and implementation for a Verifiable Information …","Circuit implementation of stake key aggregation for quorum …","","Plonk circuit gadget for stake key aggregation for quorum …","Traits for verification keys","Aggregate the verification keys with Boolean selectors.","Key aggregation circuit","Stake table commitment checking circuit","Quorum threshold checking circuit","Digest a list of verification keys and their associated …","Enforce that two input verification key variables are …","Check whether two input verification key variables are …","Returns a list of variables associated with this key …","Allows to fix the size of the message at compilation time.","Type of the actual quorum certificate object","Public parameters for generating the QC E.g: snark …","Public parameters for validating the QC E.g: verifying …","Trait for validating a QC built from different signatures …","Type of the quorum size (e.g. number of votes or …","Computes an aggregated signature from a set of partial …","Implementation for BitVectorQC that uses BLS signature + …","Checks an aggregated signature over some message provided …","Produces a partial signature on a message with a single …","Trace the list of signers given a qc.","An implementation of QC using BLS signature and a …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","type for the staked amount","","","type for the commitment to the current stake table","","","type for the iterator over (key, value) entries","type for stake key","","","type for the proof associated with the lookup result (if …","A succint commitment for Merkle tree","Path from a Merkle root to a leaf","A compressed Merkle node for Merkle path","An existential proof","Snapshots of the stake table","Locally maintained stake table generic over public key …","Common interfaces required for a stake table used in …","","","","","Update the stake table when the epoch number advances, …","","","","","","","","","","","","Batch deregister a list of keys. A default implementation …","Batch register a list of new keys. A default …","Batch update the stake balance of <code>keys</code>. Read documentation …","","","","","","","","","","","","","","","","","","","","Returns the commitment to the <code>version</code> of stake table.","","","Returns true if <code>key</code> is currently registered, else returns …","","","","","","","","","","","","Deregister an existing key from the stake table. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Index for the given key","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns an iterator over all (key, value) entries of the …","","Returns the number of keys in the <code>version</code> of the table.","","Lookup the stake under a key against a specific historical …","","","Initiating an empty stake table. Overall capacity is …","A Merkle path for the given leaf","Register a new key into the stake table.","","Randomly sample a (key, stake_amount) pair proportional to …","Almost uniformly samples a key weighted by its stake from …","","","","","","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","Returns the stakes withhelded by a public key, None if the …","","","","","","","","","Returns the accumulated stakes of all registered keys of …","","","","","","","","","","","","","","","","","","","","","Update the stake of the <code>key</code> with …","","","","","","","","","","","","Key already exists","Insufficient fund: the number of stake cannot be negative","Key not found","Malformed Merkle proof","Key mismatched","Internal error caused by Rescue","The historical snapshot requested is not supported.","The number of stake exceed U256","","Verification Error","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","VDF input.","VDF output.","VDF proof.","Public parameters","A trait for VDF proof, evaluation and verification.","Computes the VDF output and proof.","","Generates a public parameter from RNG with given …","Verifies a VDF output given the proof.","The MinRoot iteration is calculating the cubic root (or …","","","MinRoot compatible field","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caller provided an invalid argument","Payload commitment.","Internal error","Common data sent to all storage nodes.","Share-specific data sent to a storage node.","The error type for <code>VidScheme</code> methods.","","VID: Verifiable Information Dispersal","Implementation of Verifiable Information Dispersal (VID) …","","","","","","Compute a payload commitment.","","","Compute shares to send to the storage nodes","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","Recover payload from shares. Do not verify shares or check …","","","","","","Verify a share. Used by both storage node and retrieval …","","The ADVZ VID scheme, a concrete impl for <code>VidScheme</code>.","The <code>VidScheme::StorageCommon</code> type for <code>Advz</code>.","Like <code>Advz</code> except with more abstraction.","The <code>VidScheme::StorageShare</code> type for <code>Advz</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Same as <code>VidScheme::dispersal_data</code> except <code>payload</code> is a …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Return a new instance of <code>Self</code>.","Same as <code>VidScheme::recover_payload</code> except returns a <code>Vec</code> of …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,8,0,0,8,88,88,88,0,8,8,8,89,89,89,89,0,89,89,0,89,89,89,0,0,24,90,24,90,24,90,90,24,90,24,90,90,24,90,24,24,90,24,24,24,90,24,90,24,90,24,90,24,90,24,90,24,24,90,24,24,90,90,24,90,24,90,24,90,24,23,48,46,23,48,48,23,23,48,46,23,0,0,0,0,0,0,0,46,47,44,38,38,48,46,47,44,38,48,46,47,44,38,44,23,23,23,48,46,47,44,38,48,46,47,44,38,44,46,47,44,38,46,47,44,38,23,38,47,23,38,48,46,47,44,38,48,46,47,44,38,23,38,46,47,44,38,44,44,48,46,47,44,38,46,47,44,38,46,46,47,47,44,44,38,38,0,46,47,44,44,38,48,46,47,44,38,44,47,47,47,46,47,44,47,47,48,46,47,44,38,48,46,47,44,38,48,46,47,44,38,48,46,47,44,38,48,46,47,44,38,23,38,23,38,23,38,44,38,47,23,38,23,38,46,47,44,38,44,44,38,23,38,44,44,46,47,44,38,44,23,38,47,44,48,46,47,44,44,44,38,48,46,47,44,38,48,46,47,44,38,23,38,47,48,46,47,44,38,91,92,92,91,43,43,43,43,43,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,93,93,93,93,0,93,0,93,93,67,0,0,0,0,66,68,94,66,68,94,66,68,66,68,94,66,68,94,66,68,66,68,66,68,66,68,66,68,66,68,94,66,68,94,66,68,66,68,66,94,66,68,66,68,66,66,68,68,94,66,68,94,66,68,68,94,66,68,94,66,68,94,66,68,94,66,68,94,66,68,66,68,66,68,66,68,94,66,68,94,66,68,94,66,68,94,66,68,94,94,66,68,76,95,76,95,95,0,0,0,0,76,76,76,76,76,95,76,76,95,76,76,76,76,76,76,76,76,76,76,76,76,76,76,95,76,76,76,76,76,95,76,0,0,0,0,82,81,86,82,81,86,82,81,81,86,82,81,86,82,81,81,82,81,82,81,86,81,86,82,81,86,82,81,82,81,81,86,86,86,82,81,81,81,81,82,81,86,82,81,86,82,81,86,82,81,86,82,81,86,82,81,86,82,81,86,86,86,82,81,81,81,82,81,86,82,81,86,82,81,86,82,81,86,86,82,81],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],3,[3,[4]],[5,[1]]],[[7,[6]]]],[[[3,[[8,[5]]]],[3,[4]],[8,[5]],5],[[7,[6]]]],[[[3,[[8,[5]]]],[3,[9]],9],[[7,[6]]]],[[[3,[9]],[3,[4]],9],[[7,[6]]]],[[[3,[10]],[3,[[11,[10]]]]],10],[[[2,[1]]],[[7,[6]]]],[[[2,[1]]],[[7,[4,6]]]],[[],[[12,[9]]]],0,0,0,0,0,0,[[13,3],[[7,[14]]]],0,[15,[[7,[14]]]],[[15,[0,[16,17]]],[[7,[14]]]],[15,[[7,[12,14]]]],0,0,0,[[],18],[[],18],[[],18],[[],18],[[13,3],[[7,[14]]]],[[]],[[]],[[]],[[]],[15,[[7,[14]]]],[19],[19],[19],[19],[20,[[7,[[24,[21,[0,[22,23]]]]]]]],[19],[19],[[[24,[[0,[25,21]],[0,[25,23]]]],[24,[[0,[25,21]],[0,[25,23]]]]],26],[[[24,[[0,[27,21]],[0,[27,23]]]],28],29],[[]],[[]],[[],19],[[],19],[[]],[[]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[[[24,[21,[0,[34,23]]]],35],7],[[15,[0,[16,17]]],[[7,[14]]]],0,0,[15,[[7,[12,14]]]],[[],7],[[],7],[[],7],[[],7],[[],36],[[],36],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[37],[37],[37],[37],[[[38,[0]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[0,[39,40]]],[[7,[41]]]],[42,[[7,[43]]]],[[42,42],[[7,[43]]]],[[3,3,[12,[26]]],[[7,[12,43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,[[7,[41]]]],[[[46,[45]]],[[46,[45]]]],[[[47,[45]]],[[47,[45]]]],[44,44],[[[38,[[0,[45,0]]]]],[[38,[[0,[45,0]]]]]],[[]],[[]],[[]],[[]],[48,[[7,[43]]]],[[[38,[0]],48],[[7,[43]]]],[[[47,[0]]],[[7,[49,43]]]],[[],26],[[[38,[0]]],26],[19],[19],[19],[19],[19],[19],[19],[19],[19],[19],[[],[[7,[43]]]],[[[38,[0]]],[[7,[43]]]],[20,[[7,[[46,[22]]]]]],[20,[[7,[[47,[22]]]]]],[20,[[7,[44]]]],[20,[[7,[[38,[0]]]]]],[[50,51,52],[[7,[44,41]]]],[44,49],[19],[19],[19],[19],[19],[[[46,[25]],[46,[25]]],26],[[[47,[25]],[47,[25]]],26],[[44,44],26],[[[38,[[0,[25,0]]]],[38,[[0,[25,0]]]]],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],0,[[[46,[27]],28],29],[[[47,[27]],28],29],[[44,28],29],[[44,28],29],[[[38,[[0,[27,0]]]],28],29],[[]],[[]],[[]],[[]],[[]],[53,[[7,[44]]]],[[[47,[0]]],[[54,[0]]]],[[[47,[0]]],54],[[[47,[0]]],[[54,[55]]]],[[[46,[56]],57]],[[[47,[56]],57]],[[44,57]],[[[47,[0]]],19],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[48,[[7,[43]]]],[[[38,[0]],48],[[7,[43]]]],[48,[[7,[19,43]]]],[[[38,[0]],48],[[7,[19,43]]]],[48,[[7,[43]]]],[[[38,[0]],48],[[7,[43]]]],[[49,19,19],44],[19,[[38,[0]]]],0,[[],[[7,[43]]]],[[[38,[0]]],[[7,[43]]]],[[[0,[58,59]]],54],[[[38,[0]],[0,[58,59]]],54],[[[46,[34]],35],7],[[[47,[34]],35],7],[[44,35],7],[[[38,[0]],35],7],[[44,60,51],[[7,[41]]]],[[44,51],19],0,[48,[[7,[43]]]],0,[44,19],[[],61],[[]],[[]],[[]],[[]],[[],61],[48,[[7,[43]]]],[[[38,[0]],48],[[7,[43]]]],[[[47,[0]]],19],[44,19],[[],7],[[],7],[[],7],[62,[[7,[44]]]],[62,[[7,[44]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],36],[[],36],[[],36],[[],36],[[],36],[26,[[7,[43]]]],[[[38,[0]],26],[[7,[43]]]],[[[47,[0]],44],[[7,[43]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],18],[[],18],[[],63],[[]],[[]],[19],[19],[19],[[43,28],29],[[43,28],29],[[]],[[],19],[[]],[[[31,[30]]],[[31,[18,30]]]],[32,[[32,[18]]]],[33,[[33,[18]]]],[64],[[],61],[[],7],[[],7],[[],36],[[]],0,0,0,0,0,[[],[[7,[14]]]],0,[[65,[54,[[0,[16,17]]]]],[[7,[14]]]],[[],[[7,[14]]]],0,0,0,0,0,[37],[37],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[0,[39,40]]],[[7,[41]]]],[[[0,[39,40]]],[[7,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[66,[[7,[41]]]],[[[68,[67]]],[[7,[41]]]],[66,66],[[[68,[[0,[45,67]]]]],[[68,[[0,[45,67]]]]]],[[]],[[]],[[66,66],69],[[[68,[[0,[70,67]]]],[68,[[0,[70,67]]]]],69],[[],66],[[],[[68,[[0,[71,67]]]]]],[19],[19],[19],[19],[19],[19],[[50,51,52],[[7,[66,41]]]],[[50,51,52],[[7,[[68,[67]],41]]]],0,[19],[19],[19],[[66,66],26],[[[68,[[0,[25,67]]]],[68,[[0,[25,67]]]]],26],[[],26],[[],26],[[],26],[[],26],[[],[[7,[14]]]],[[66,28],29],[[[68,[[0,[27,67]]]],28],29],[[]],[[]],[72,[[68,[67]]]],[[]],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[[66,66],[[54,[69]]]],[[[68,[[0,[73,67]]]],[68,[[0,[73,67]]]]],[[54,[69]]]],[[66,60,51],[[7,[41]]]],[[[68,[67]],60,51],[[7,[41]]]],[[66,51],19],[[[68,[67]],51],19],[[65,[54,[[0,[16,17]]]]],[[7,[14]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],36],[[],36],[[],36],[[],[[7,[14]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],18],[[],18],[[],63],[[]],[[]],[[[3,[74]]],75],[19],[19],[[[3,[74]]],75],[19],[[76,28],29],[[76,28],29],[77,76],[78,76],[[]],[41,76],[14,76],[[],19],[[]],[[[31,[30]]],[[31,[18,30]]]],[32,[[32,[18]]]],[33,[[33,[18]]]],[64],[3,[[75,[[12,[74]]]]]],[76,[[54,[63]]]],[[],61],[[],7],[[],7],[[],36],[[],[[75,[7]]]],[[]],0,0,0,0,[37],[37],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[0,[39,40]]],[[7,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[81,[79,80]]],[[7,[41]]]],[[[82,[79,80]]],[[82,[79,80]]]],[[[81,[79,80]]],[[81,[79,80]]]],[[]],[[]],[[[86,[83,72,[0,[84,85,71,45,60]],80]],[3,[74]]],75],[[],[[81,[79,80]]]],[19],[19],[19],[19],[19],[19],[20,[[7,[[82,[79,80]]]]]],[20,[[7,[[81,[79,80]]]]]],[[50,51,52],[[7,[[81,[79,80]],41]]]],[[[86,[83,72,[0,[84,85,71,45,60]],80]],[3,[74]]],75],[[[86,[83,72,[0,[84,85,71,45,60]],80]],3],75],[19],[19],[19],[[[81,[79,80]],[81,[79,80]]],26],[[],26],[[],26],[[[82,[79,80]],28],29],[[[81,[79,80]],28],29],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[[[31,[30]]],[[31,[18,30]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[32,[[32,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[33,[[33,[18]]]],[[19,19,87],[[75,[[86,[83]]]]]],[[[86,[83,72,[0,[84,85,71,45,60]],80]],3],[[75,[12]]]],[[[86,[83,72,[0,[84,85,71,45,60]],80]],3],[[75,[[12,[74]]]]]],[[[82,[79,80]],35],7],[[[81,[79,80]],35],7],[[[81,[79,80]],60,51],[[7,[41]]]],[[[81,[79,80]],51],19],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],36],[[],36],[[],36],[[[86,[83,72,[0,[84,85,71,45,60]],80]]],[[75,[7]]]],[[]],[[]],[[]]],"c":[],"p":[[8,"PrimeField"],[3,"PlonkCircuit"],[15,"slice"],[3,"BoolVar"],[8,"EmulationConfig"],[4,"CircuitError"],[4,"Result"],[8,"VerKeyVar"],[6,"Variable"],[8,"RescueParameter"],[8,"SerializableEmulatedStruct"],[3,"Vec"],[3,"BitSlice"],[4,"PrimitivesError"],[3,"GenericArray"],[8,"CryptoRng"],[8,"RngCore"],[8,"Any"],[15,"usize"],[8,"Deserializer"],[8,"AggregateableSignatureSchemes"],[8,"Deserialize"],[8,"StakeTableScheme"],[3,"QCParams"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Serialize"],[8,"Serializer"],[3,"TypeId"],[3,"Private"],[3,"StakeTable"],[8,"Iterator"],[8,"Send"],[4,"SerializationError"],[8,"IntoIterator"],[4,"StakeTableError"],[3,"MerkleCommitment"],[8,"Clone"],[4,"MerklePathEntry"],[3,"MerkleProof"],[4,"SnapshotVersion"],[6,"Fq"],[8,"Read"],[4,"Compress"],[4,"Validate"],[15,"str"],[4,"Option"],[3,"U256"],[8,"Hash"],[8,"Hasher"],[8,"SeedableRng"],[8,"CryptoRngCore"],[8,"Write"],[3,"String"],[3,"TaggedBase64"],[8,"Error"],[3,"Demand"],[15,"u64"],[3,"MinRootPP"],[8,"MinRootField"],[3,"MinRootElement"],[4,"Ordering"],[8,"Ord"],[8,"Default"],[8,"AffineRepr"],[8,"PartialOrd"],[15,"u8"],[6,"VidResult"],[4,"VidError"],[3,"Error"],[4,"PCSError"],[8,"PolynomialCommitmentScheme"],[8,"MerkleTreeScheme"],[3,"Common"],[3,"Share"],[8,"UnivariatePCS"],[8,"Digest"],[8,"DynDigest"],[3,"GenericAdvz"],[8,"Borrow"],[8,"QCKeyAggregateGadget"],[8,"QuorumCertificate"],[3,"BitVectorQC"],[13,"Leaf"],[13,"Branch"],[8,"VDF"],[3,"MinRoot"],[8,"VidScheme"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
